<% layout("/layouts/boilerplate") %>
<style>
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f2f4f7;
  }

  .checkout-wrapper {
    max-width: 800px;
    margin: 60px auto;
    background: #ffffff;
    padding: 40px;
    border-radius: 18px;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
  }

  .checkout-title {
    text-align: center;
    font-size: 32px;
    font-weight: 700;
    color: #2e2e2e;
    margin-bottom: 30px;
  }

  .form-group {
    margin-bottom: 20px;
  }

  .form-group label {
    display: block;
    font-weight: 600;
    margin-bottom: 8px;
    color: #333;
  }

  .form-group input,
  .form-group select {
    width: 100%;
    padding: 14px;
    border-radius: 12px;
    border: 1px solid #ccc;
    font-size: 15px;
    box-sizing: border-box;
    transition: border 0.3s ease;
  }

  .form-group input:focus {
    border-color: #28a745;
    outline: none;
  }

  .checkout-btn {
    display: inline-block;
    width: 100%;
    padding: 15px;
    background-color: #28a745;
    color: #fff;
    font-size: 18px;
    font-weight: 600;
    border: none;
    border-radius: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .checkout-btn:hover {
    background-color: #218838;
  }

  .form-group .inline {
    display: flex;
    gap: 20px;
  }

  .form-group .inline input {
    flex: 1;
  }
</style>

<div class="checkout-wrapper">
  <div class="checkout-title">Checkout & Shipping</div>

  <form id="checkout-form">
    <div class="form-group">
      <label for="fullName">Full Name</label>
      <input type="text" id="fullName" name="name" required>
    </div>

    <div class="form-group inline">
      <div>
        <label for="email">Email</label>
        <input type="email" id="email" name="email" required>
      </div>
      <div>
        <label for="phone">Phone Number</label>
        <input type="tel" id="phone" name="phone" required>
      </div>
    </div>

    <div class="form-group">
      <label for="address">Shipping Address</label>
      <input type="text" id="address" name="address" required>
  

       <label for="city">City</label>
      <input type="text" id="city" name="city" placeholder="City" required>
       <label for="State">State</label>
      <input type="text" id="state" name="state" placeholder="State" required>
       <label for="zip-code">Zip Code</label>
      <input type="text" id="zip" name="zip" placeholder="ZIP Code" required>
  </div>
<p>Total Payable: <span id="total-amount">â‚¹0.00</span></p>
<input type="hidden" id="amount" name="amount" />
    <button type="submit" class="checkout-btn">Pay with Razorpay</button>
  </form>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
 const form = document.getElementById('checkout-form');
const cart = JSON.parse(localStorage.getItem("cart")) || [];

// ðŸŸ¡ Debug Print
console.log("Cart from localStorage:", cart);

let total = 0;

cart.forEach(item => {
  const price = parseFloat(item.price || 0);       // e.g., 2000
  const discount = parseFloat(item.discount || 0); // e.g., 200
  const quantity = parseInt(item.quantity || 1);   // default 1

  const discountedPrice = price - (price * discount / 100);
const finalPrice = discountedPrice * quantity;

  total += finalPrice;
});

// Update amount input field and display
document.getElementById("amount").value = total;
document.getElementById("total-amount").innerText = total.toFixed(2);



  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    // Step 1: Create Razorpay order on backend
    const res = await fetch('/checkout/create-order', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ amount: data.amount })
    });

    const result = await res.json();

    if (result.error) {
      alert(result.error);
      return;
    }

    // Step 2: Open Razorpay popup
    const options = {
      key: "<%= razorpayKey %>",
      amount: result.amount,
      currency: result.currency,
      name: "Your Shop Name",
      description: "Product Payment",
      order_id: result.id,
      handler: async function (response) {
        // Step 3: Verify Payment on backend
        const verifyRes = await fetch('/checkout/verify-payment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(response)
        });

        const verifyData = await verifyRes.json();

        if (verifyData.success) {
          window.location.href = "/order"; // Success page
        } else {
          alert("Payment verification failed");
        }
      },
      prefill: {
        name: data.name,
        email: data.email,
        contact: data.phone
      },
      theme: {
        color: "#28a745"
      }
    };

    const razor = new Razorpay(options);
    razor.open();
  });
</script>